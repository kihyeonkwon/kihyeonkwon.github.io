(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{625:function(t,e,s){t.exports=s.p+"assets/img/Untitled.fd875ee7.png"},626:function(t,e,s){t.exports=s.p+"assets/img/Untitled1.c2c37e37.png"},627:function(t,e,s){t.exports=s.p+"assets/img/Untitled2.b9fd82a2.png"},628:function(t,e,s){t.exports=s.p+"assets/img/Untitled3.26dbe84c.png"},629:function(t,e,s){t.exports=s.p+"assets/img/Untitled4.9fcd98fb.png"},630:function(t,e,s){t.exports=s.p+"assets/img/Untitled5.a04a4425.png"},631:function(t,e,s){t.exports=s.p+"assets/img/Untitled6.b72486ab.png"},632:function(t,e,s){t.exports=s.p+"assets/img/Untitled7.4701f784.png"},633:function(t,e,s){t.exports=s.p+"assets/img/Untitled8.236ef40a.png"},634:function(t,e,s){t.exports=s.p+"assets/img/Untitled9.414a29c0.png"},635:function(t,e,s){t.exports=s.p+"assets/img/Untitled10.d1868623.png"},636:function(t,e,s){t.exports=s.p+"assets/img/Untitled11.95e94a5f.png"},637:function(t,e,s){t.exports=s.p+"assets/img/Untitled12.40564d03.png"},638:function(t,e,s){t.exports=s.p+"assets/img/Untitled13.03869938.png"},639:function(t,e,s){t.exports=s.p+"assets/img/Untitled14.11b39bae.png"},640:function(t,e,s){t.exports=s.p+"assets/img/Untitled15.456343dc.png"},641:function(t,e,s){t.exports=s.p+"assets/img/Untitled17.f04def01.png"},642:function(t,e,s){t.exports=s.p+"assets/img/Untitled18.90336199.png"},643:function(t,e,s){t.exports=s.p+"assets/img/Untitled19.ff6300a9.png"},644:function(t,e,s){t.exports=s.p+"assets/img/Untitled20.ca152038.png"},645:function(t,e,s){t.exports=s.p+"assets/img/Untitled21.0b446bc0.png"},646:function(t,e,s){t.exports=s.p+"assets/img/Untitled22.812c4473.png"},647:function(t,e,s){t.exports=s.p+"assets/img/Untitled23.27d17817.png"},648:function(t,e,s){t.exports=s.p+"assets/img/Untitled24.cbf4a4fc.png"},649:function(t,e,s){t.exports=s.p+"assets/img/Untitled25.5e8de988.png"},650:function(t,e,s){t.exports=s.p+"assets/img/Untitled26.d8c2c100.png"},651:function(t,e,s){t.exports=s.p+"assets/img/Untitled27.429f1504.png"},652:function(t,e,s){t.exports=s.p+"assets/img/Untitled28.b874e90a.png"},653:function(t,e,s){t.exports=s.p+"assets/img/Untitled29.b3a37f4a.png"},654:function(t,e,s){t.exports=s.p+"assets/img/Untitled30.d46eac43.png"},655:function(t,e,s){t.exports=s.p+"assets/img/Untitled31.55411a62.png"},656:function(t,e,s){t.exports=s.p+"assets/img/Untitled32.2ed6f921.png"},657:function(t,e,s){t.exports=s.p+"assets/img/Untitled33.c7c2c143.png"},658:function(t,e,s){t.exports=s.p+"assets/img/Untitled34.eb18bcfe.png"},659:function(t,e,s){t.exports=s.p+"assets/img/Untitled35.d69d4127.png"},660:function(t,e,s){t.exports=s.p+"assets/img/Untitled36.04338156.png"},661:function(t,e,s){t.exports=s.p+"assets/img/Untitled37.e9796bc5.png"},662:function(t,e,s){t.exports=s.p+"assets/img/Untitled38.754c2ce4.png"},663:function(t,e,s){t.exports=s.p+"assets/img/Untitled39.543781b3.png"},664:function(t,e,s){t.exports=s.p+"assets/img/Untitled40.6065b776.png"},665:function(t,e,s){t.exports=s.p+"assets/img/Untitled41.042be62e.png"},666:function(t,e,s){t.exports=s.p+"assets/img/Untitled42.e2a07dfb.png"},667:function(t,e,s){t.exports=s.p+"assets/img/Untitled43.372a1ed2.png"},668:function(t,e,s){t.exports=s.p+"assets/img/Untitled44.e213cf5d.png"},669:function(t,e,s){t.exports=s.p+"assets/img/Untitled45.417d1f4e.png"},670:function(t,e,s){t.exports=s.p+"assets/img/Untitled46.4ae34800.png"},671:function(t,e,s){t.exports=s.p+"assets/img/Untitled47.aed35a12.png"},672:function(t,e,s){t.exports=s.p+"assets/img/Untitled48.07db29e6.png"},673:function(t,e,s){t.exports=s.p+"assets/img/Untitled49.551118de.png"},996:function(t,e,s){"use strict";s.r(e);var a=s(45),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"algorithm-datastructures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-datastructures"}},[t._v("#")]),t._v(" Algorithm & Datastructures")]),t._v(" "),a("blockquote",[a("p",[t._v("My knowledge compilation of algorithm & datastructures.")])]),t._v(" "),a("h3",{attrs:{id:"referenced-sites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#referenced-sites"}},[t._v("#")]),t._v(" Referenced Sites")]),t._v(" "),a("hr"),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://cs50.harvard.edu/x/2020/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Harvard CS50"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://swexpertacademy.com/main/learn/course/lectureVideoPlayer.do",target:"_blank",rel:"noopener noreferrer"}},[t._v("Samsung SW Expert Academy"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.udemy.com/course/master-the-coding-interview-data-structures-algorithms/learn/lecture/12431196?start=300#overview",target:"_blank",rel:"noopener noreferrer"}},[t._v("Master the Coding Interview"),a("OutboundLink")],1)])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("img",{attrs:{src:s(625),alt:"Untitled.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(626),alt:"Untitled1.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(627),alt:"Untitled2.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(628),alt:"Untitled3.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(629),alt:"Untitled4.png"}})]),t._v(" "),a("p",[t._v("알고리즘 복잡도")]),t._v(" "),a("p",[t._v("알고리즘은 효율적이여야한다. 설계 자원분석 효율성 제시")]),t._v(" "),a("p",[t._v("공간적 효율성 : 메모리 공간")]),t._v(" "),a("p",[t._v("시간적 효율성 : 연산 시간")]),t._v(" "),a("p",[t._v("효율성의 반대말 = 복잡도")]),t._v(" "),a("p",[t._v("시간적 복잡도로 알고리즘의 효율성을 평가할 수 있다.")]),t._v(" "),a("p",[t._v("Big O : 복잡도의 점근적 상한. 최고차항만 고려.")]),t._v(" "),a("p",[t._v("Big Omega : 점근적 하한. 최고차항만 계수 없이 고려")]),t._v(" "),a("p",[t._v("Theta = O 와 Omega가 같은경우.")]),t._v(" "),a("p",[t._v("효율적인 알고리즘은 슈퍼컴퓨터보다 더큰가치가 있다.")]),t._v(" "),a("p",[t._v("비트연산자")]),t._v(" "),a("p",[a("img",{attrs:{src:s(630),alt:"Untitled5.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(631),alt:"Untitled6.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(632),alt:"Untitled7.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(633),alt:"Untitled8.png"}})]),t._v(" "),a("p",[t._v("완전검색기법")]),t._v(" "),a("p",[t._v("가능한 모든 경우들을 나열해보고 확인")]),t._v(" "),a("p",[t._v("brute force, generate and test라고도 불린다. 빠른시간안에 알고리즘 설게가능. 대부분의 문제에 적용가능.")]),t._v(" "),a("p",[t._v("순차검색 : 첫번째 자료부터 비교하면서 진행. 존재하지 않는경우가 최악의 경우.")]),t._v(" "),a("p",[t._v("문제의 크기가 커지면 시간복잡도가 매우 크게 증가.")]),t._v(" "),a("p",[t._v("그리디 기법이나 동적계획법으로 더 효율적인 알고리즘을 찾을수있다.")]),t._v(" "),a("p",[t._v("문제를 풀때 완전검색으로 해답도출후 성능개선을 위해 다른 알고리즘을 사용할수있다.")]),t._v(" "),a("p",[t._v("베이비진의 경우 모둔 순열을 나열하고 앞세자리와 뒤세자리를 잘라서 베이비진 테스트를 해볼수있다.")]),t._v(" "),a("p",[t._v("중복을 제거 할 수 있따면 시간을 아낄수있다.")]),t._v(" "),a("p",[t._v("조합적 문제")]),t._v(" "),a("p",[t._v("순열, 조합, 부분집합과 같은 조합적 문제들과 완전검색은 관련돼있다.")]),t._v(" "),a("p",[t._v("완전검색은 조합적문제에 대한 brute force 이다.")]),t._v(" "),a("p",[t._v("순열")]),t._v(" "),a("p",[t._v("한줄로 나열. n개 중 r를 선택. nPr로 표현된다. nPn은 n!과 동일하다")]),t._v(" "),a("p",[a("img",{attrs:{src:s(634),alt:"Untitled9.png"}})]),t._v(" "),a("p",[t._v("기하급수적으로 실행시간이 증가한다. 현실적으로 완전검색은 하기 힘들어진다.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(635),alt:"Untitled10.png"}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("사전식 순서 : 요소들이 오름차순으로 나열된 형태가 시작하는 순열")])]),t._v(" "),a("li",[a("p",[t._v("최소 변경을 통한 방법 : 각각의 순열들은 이전의 상태에서 두개의 요소를 교환하여 생성.")]),t._v(" "),a("ul",[a("li",[t._v("Johnson-Trotter 알고리즘.")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(636),alt:"Untitled11.png"}})])]),t._v(" "),a("li",[a("p",[t._v("원소교환을 통한 방법 : 최소교환은 아니지만 자주 사용된다.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(637),alt:"Untitled12.png"}})])]),t._v(" "),a("li",[a("p",[t._v("파이썬의 라이브러리를 이용한 방법 :")]),t._v(" "),a("p",[a("img",{attrs:{src:s(638),alt:"Untitled13.png"}})])])]),t._v(" "),a("p",[t._v("부분집합")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Knapsack Problem")]),t._v(" "),a("p",[a("img",{attrs:{src:s(639),alt:"Untitled14.png"}})]),t._v(" "),a("p",[t._v("탐욕기법과 동적에서 배우게된다.")])]),t._v(" "),a("li",[a("p",[t._v("단순하게 모든 부분집합생성하는 방법")]),t._v(" "),a("p",[a("img",{attrs:{src:s(640),alt:"Untitled15.png"}})])]),t._v(" "),a("li")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("![Untitled16.png](./algorithm/Untitled16.png)\n")])])]),a("p",[t._v("조합")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("서로다른 n개의 원소중 r개를 순서없이 골라낸것. nCr")]),t._v(" "),a("p",[a("img",{attrs:{src:s(641),alt:"Untitled17.png"}})])]),t._v(" "),a("li")]),t._v(" "),a("p",[a("img",{attrs:{src:s(642),alt:"Untitled18.png"}})]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("라이브러리를 활용한 조합과 중복조합")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(643),alt:"Untitled19.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(644),alt:"Untitled20.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(645),alt:"Untitled21.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(646),alt:"Untitled22.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(647),alt:"Untitled23.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(648),alt:"Untitled24.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(649),alt:"Untitled25.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(650),alt:"Untitled26.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(651),alt:"Untitled27.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(652),alt:"Untitled28.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(653),alt:"Untitled29.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(654),alt:"Untitled30.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(655),alt:"Untitled31.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(656),alt:"Untitled32.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(657),alt:"Untitled33.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(658),alt:"Untitled34.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(659),alt:"Untitled35.png"}})]),t._v(" "),a("p",[t._v("중간값으로 해야 최악을 벗어날수있다. 보통은 편하니까 제일 왼쪽꺼하는데 재수없게 1이라던가 그런거 걸리면 n^2 다해야된다.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(660),alt:"Untitled36.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(661),alt:"Untitled37.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(662),alt:"Untitled38.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(663),alt:"Untitled39.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(664),alt:"Untitled40.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(665),alt:"Untitled41.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(666),alt:"Untitled42.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(667),alt:"Untitled43.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(668),alt:"Untitled44.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(669),alt:"Untitled45.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(670),alt:"Untitled46.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(671),alt:"Untitled47.png"}})]),t._v(" "),a("h1",{attrs:{id:"datastructures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#datastructures"}},[t._v("#")]),t._v(" Datastructures")]),t._v(" "),a("h2",{attrs:{id:"big-o"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#big-o"}},[t._v("#")]),t._v(" Big O")]),t._v(" "),a("h2",{attrs:{id:"arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[t._v("#")]),t._v(" Arrays")]),t._v(" "),a("h2",{attrs:{id:"hash-tables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash-tables"}},[t._v("#")]),t._v(" Hash Tables")]),t._v(" "),a("h2",{attrs:{id:"linked-lists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linked-lists"}},[t._v("#")]),t._v(" Linked Lists")]),t._v(" "),a("h2",{attrs:{id:"stacks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stacks"}},[t._v("#")]),t._v(" Stacks")]),t._v(" "),a("ol",[a("li",[t._v("What is a stack?\n"),a("ul",[a("li",[t._v("Like a stack of plates. It is 'Last In First Out'.")]),t._v(" "),a("li",[t._v("Usually programming languages are made with stacks in mind.")]),t._v(" "),a("li",[t._v("ctrl+z, go back page in internet are all examples of stacks.")]),t._v(" "),a("li",[t._v("big O is (n)")]),t._v(" "),a("li",[t._v("pop : remove the last item")]),t._v(" "),a("li",[t._v("push : add a item")]),t._v(" "),a("li",[t._v("peek : view the last item")])])]),t._v(" "),a("li",[t._v("How to implement\n"),a("ul",[a("li",[t._v("Using arrays")]),t._v(" "),a("li",[t._v("Using Linked Lists")])])]),t._v(" "),a("li",[t._v("How it works - Calculator\n"),a("ul",[a("li",[t._v("prefix, infix, postfix notation : placement of operators and operands. Infix is commonly used but computers use postfix notation to calculate.")]),t._v(" "),a("li",[t._v("How to change from infix to postfix\n"),a("ol",[a("li",[a("p",[t._v("Prepare stack for operators.")])]),t._v(" "),a("li",[a("p",[t._v("Read token")])]),t._v(" "),a("li",[a("p",[t._v("If token is operand(numbers) → print")])]),t._v(" "),a("li",[a("p",[t._v("if token is operator → compare with last item in stack → if no operator in stack : push. if token's priority is higher : push,  else :pop until token's operator is higher, then push")]),t._v(" "),a("p",[a("img",{attrs:{src:s(672),alt:"Untitled48.png"}})])]),t._v(" "),a("li",[a("p",[t._v("if token is right bracket "),a("code",[t._v(")")]),t._v(" : pop and print operator in stack UNTIL "),a("code",[t._v("(")]),t._v(" left bracket is popped. bracket is not printed")])]),t._v(" "),a("li",[a("p",[t._v("Repeat until nothing to read from infix")])]),t._v(" "),a("li",[a("p",[t._v("Finally pop everything from operator stack. "),a("code",[t._v("(")]),t._v(" left bracket outside the stack has highest priority. "),a("code",[t._v(")")]),t._v(" right bracket inside stack has lowest priority.")])])])]),t._v(" "),a("li",[t._v("How to calculate using postfix\n"),a("ol",[a("li",[t._v("Prepare stack for operands.")]),t._v(" "),a("li",[t._v("Push to stack if operands")]),t._v(" "),a("li",[t._v("If operator → pop from stack twice → calculate. "),a("code",[t._v("first pop - operator - secondpop")]),t._v(" → push value back to stack")]),t._v(" "),a("li",[t._v("If finished : pop from stack")])])])])])]),t._v(" "),a("h2",{attrs:{id:"queues"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queues"}},[t._v("#")]),t._v(" Queues")]),t._v(" "),a("ol",[a("li",[t._v("What is a queue\n"),a("ul",[a("li",[t._v("Like a roller coaster queue, its 'First In First Out'.")]),t._v(" "),a("li",[t._v("Examples are, uber, ticket buying, printer.")]),t._v(" "),a("li",[t._v("Front means the first among items. Rear means last item saved.")]),t._v(" "),a("li",[t._v("big O is (n)")]),t._v(" "),a("li",[t._v("enQueue() : add item. check full. Add 1 to rear and place new item at the new rear position")]),t._v(" "),a("li",[t._v("deQueue() : remove first item. check empty. Add 1 to front and return new item at the front position")]),t._v(" "),a("li",[t._v("createQueue() : Makes empty queue")]),t._v(" "),a("li",[t._v("isEmpty() : check if queue is empty. front == rear == -1")]),t._v(" "),a("li",[t._v("isFull() : check if queue is full. rear == n-1")]),t._v(" "),a("li",[t._v("peek() : check whats the first item to come out. checkempty then return Q[front+1]")])])]),t._v(" "),a("li",[t._v("How to implement\n"),a("ul",[a("li",[a("p",[t._v("Using arrays : Not a good idea. Because you need to shift everything when the first item is removed.")])]),t._v(" "),a("li",[a("p",[t._v("Linked Lists :")])]),t._v(" "),a("li",[a("p",[t._v("createQueue() : Empty queue created, front = rear = -1, size=1")])]),t._v(" "),a("li",[a("p",[t._v("enQueue() : front = -1 , rear = 0 /")])]),t._v(" "),a("li",[a("p",[t._v("enQueue() : front = -1 , rear = 1")])]),t._v(" "),a("li",[a("p",[t._v("deQueue() : front = 0, rear = 1 /")])]),t._v(" "),a("li",[a("p",[t._v("enQueue() : front = 0, rear =2")])]),t._v(" "),a("li",[a("p",[t._v("deQueue() : front = 1, rear =2")])]),t._v(" "),a("li",[a("p",[t._v("deQueue() : front = rear = 2")]),t._v(" "),a("p",[t._v("we know when front=rear queue is empty")])]),t._v(" "),a("li",[a("p",[t._v("States of Queue")]),t._v(" "),a("ol",[a("li",[t._v("Initial : front = rear = -1")]),t._v(" "),a("li",[t._v("Empty : front = rear")]),t._v(" "),a("li",[t._v("Full : rear = n - 1")])])])])]),t._v(" "),a("li",[t._v("Arrays vs Stacks vs Queues\n"),a("ul",[a("li",[t._v("Stacks and Queues are different in that the direction of item being removed.")]),t._v(" "),a("li",[t._v("Array can have random access to items inside")]),t._v(" "),a("li",[t._v("Stacks and Queues have limited access. Having a limited access is actually a benefit")])])]),t._v(" "),a("li",[t._v("Circular queue\n"),a("ul",[a("li",[t._v("initial state : front = rear = 0")]),t._v(" "),a("li",[t._v("when front or rear reaches n-1, index reset to 0.")]),t._v(" "),a("li",[t._v("front is always left empty")]),t._v(" "),a("li",[t._v("createQueue() : n=1, front = end =0")]),t._v(" "),a("li",[t._v("isEmpty(),  : front = rear")]),t._v(" "),a("li",[t._v("isFull() : (rear +1)%n =front")]),t._v(" "),a("li",[t._v("enQueue() : check if Full. rear ← (rear+1)%n; cQ(rear)=item")]),t._v(" "),a("li",[t._v("deQueue(): check if empty; front←(front +1)%n ; return cQ[front]")])])])]),t._v(" "),a("h2",{attrs:{id:"trees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trees"}},[t._v("#")]),t._v(" Trees")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("What is a tree")]),t._v(" "),a("ul",[a("li",[t._v("1:N relationship. It is non-linear.")]),t._v(" "),a("li",[t._v("Edge : the relation. Node : the items.")]),t._v(" "),a("li",[t._v("Height : height of root is either 0 or 1. Height of tree equals to the highest node's height.")])])]),t._v(" "),a("li",[a("p",[t._v("Binary Trees")]),t._v(" "),a("ul",[a("li",[t._v("Special kind of tree where all the nodes have maximum of  two  children.")]),t._v(" "),a("li",[t._v("If the height is "),a("code",[t._v("H")]),t._v(" , minimum number of nodes is "),a("code",[t._v("H+1")]),t._v(" and maximum is "),a("code",[t._v("2^h+1 - 1")])]),t._v(" "),a("li",[t._v("Most commonly used in programming")]),t._v(" "),a("li",[t._v("There are three types of binary trees\n"),a("ul",[a("li",[t._v("Full binary tree: Every node is full and has "),a("code",[t._v("2^h+1 - 1")]),t._v(" of nodes")]),t._v(" "),a("li",[t._v("Complete binary tree : When height is h, number of nodes are $2^h <= n < 2^h*2^1 -1$. and no node number is empty between 1 and n.")]),t._v(" "),a("li",[t._v("Skewed binary tree : One sided tree (no value for programming, rather use a list)")])])])])]),t._v(" "),a("li",[a("p",[t._v("Traversal")]),t._v(" "),a("p",[a("img",{attrs:{src:s(673),alt:"Untitled49.png"}})]),t._v(" "),a("p",[t._v("Preorder: A B D H I E J C F K G L M")]),t._v(" "),a("p",[t._v("Inorder : H D I B J E A F K C L G M")]),t._v(" "),a("p",[t._v("Postorder : H I D J E B K F L M G C A")]),t._v(" "),a("ul",[a("li",[t._v("Visiting every node without duplicates.")]),t._v(" "),a("li",[t._v("Because trees are not linear, we cannot know the order. That's why we can decide from these three\n"),a("ul",[a("li",[t._v("Preorder : V L R (root left right)")]),t._v(" "),a("li",[t._v("Inorder : L V R")]),t._v(" "),a("li",[t._v("Postorder : L R V")])])])])]),t._v(" "),a("li",[a("p",[t._v("How to implement")]),t._v(" "),a("ol",[a("li",[t._v("Using Lists\n"),a("ul",[a("li",[t._v("Every node is given a number, starting from 1 given to root")]),t._v(" "),a("li",[t._v("Level N nodes have numbers given from 2^n to 2^(n+1) - 1")]),t._v(" "),a("li",[t._v("Node i's parent node is i//2")]),t._v(" "),a("li",[t._v("Node i's left-child is 2*i")]),t._v(" "),a("li",[t._v("Node i's right-child is 2*i+1")]),t._v(" "),a("li",[t._v("For tree with height H, you need a list with length of 2^H. list[0] is not used.")]),t._v(" "),a("li",[t._v("You can see this uses much more memory than needed (especially for skewed trees).")]),t._v(" "),a("li",[t._v("Linked lists can be used to improve efficiency.")])])])])]),t._v(" "),a("li",[a("p",[t._v("Binary Search Tree")]),t._v(" "),a("ul",[a("li",[t._v("Datatype used for efficient searching")]),t._v(" "),a("li",[t._v("Every item has different key")]),t._v(" "),a("li",[t._v("left subtree's key < parent's key < right subtree's key")]),t._v(" "),a("li",[t._v("When tranversed in inorder, it returns ascending ordered keys.")]),t._v(" "),a("li",[t._v("searching's O(h) is h. Average is O(log n). Worst case O(n)")])])]),t._v(" "),a("li",[a("p",[t._v("Heap")]),t._v(" "),a("ul",[a("li",[t._v("Datatype used to get the maximum or minimum value.")]),t._v(" "),a("li",[t._v("By definition every key must be different.")]),t._v(" "),a("li",[t._v("When adding item, temporarily add it to the next place. Then swap it with parent until size relationship is ok.")]),t._v(" "),a("li",[t._v("When deleting item, can only delete the root item. Therefore, you are able to implement 우선순위 queue with heap.")]),t._v(" "),a("li",[t._v("First delete the root node. Next, move the 'last' node to the root node. Start swapping between child and parent.")])])])]),t._v(" "),a("h2",{attrs:{id:"graphs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphs"}},[t._v("#")]),t._v(" Graphs")]),t._v(" "),a("h1",{attrs:{id:"algorithm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#algorithm"}},[t._v("#")]),t._v(" Algorithm")]),t._v(" "),a("h2",{attrs:{id:"sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[t._v("#")]),t._v(" Sort")]),t._v(" "),a("h3",{attrs:{id:"selection-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#selection-sort"}},[t._v("#")]),t._v(" Selection Sort")]),t._v(" "),a("h3",{attrs:{id:"bubble-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bubble-sort"}},[t._v("#")]),t._v(" Bubble Sort")]),t._v(" "),a("h3",{attrs:{id:"insertion-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insertion-sort"}},[t._v("#")]),t._v(" Insertion Sort")]),t._v(" "),a("h3",{attrs:{id:"merge-sort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-sort"}},[t._v("#")]),t._v(" Merge Sort")]),t._v(" "),a("h3",{attrs:{id:"linear-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linear-search"}},[t._v("#")]),t._v(" Linear Search")]),t._v(" "),a("h3",{attrs:{id:"binary-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#binary-search"}},[t._v("#")]),t._v(" Binary Search")]),t._v(" "),a("h2",{attrs:{id:"recursion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recursion"}},[t._v("#")]),t._v(" Recursion")]),t._v(" "),a("h2",{attrs:{id:"dp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dp"}},[t._v("#")]),t._v(" DP")]),t._v(" "),a("h2",{attrs:{id:"dfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dfs"}},[t._v("#")]),t._v(" DFS")]),t._v(" "),a("ol",[a("li",[t._v("How it works\n"),a("ul",[a("li",[t._v("Current Location : V, Unvisited Connected Location : W")]),t._v(" "),a("li",[t._v("Two stacks needed : visited true false stack and last visited push/pop stack")]),t._v(" "),a("li",[t._v("starting point set as V")]),t._v(" "),a("li",[t._v("move to W and push V to stack")]),t._v(" "),a("li",[t._v("set W as V and recall")]),t._v(" "),a("li",[t._v("IF, there are no W left, pop from stack and set last added V as V again.")]),t._v(" "),a("li",[t._v("Repeat Process")])])])]),t._v(" "),a("h2",{attrs:{id:"bfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bfs"}},[t._v("#")]),t._v(" BFS")]),t._v(" "),a("ol",[a("li",[t._v("How it works\n"),a("ul",[a("li",[t._v("Current Location : V")]),t._v(" "),a("li",[t._v("One stack needed for TF visited. Second stacked needed to record visited order.")]),t._v(" "),a("li",[t._v("One queue needed to keep track of order to visit")]),t._v(" "),a("li",[t._v("starting point set as V")]),t._v(" "),a("li",[t._v("enQueue V to queue")]),t._v(" "),a("li",[t._v("enQueue childern")]),t._v(" "),a("li",[t._v("deQueue and move to children")])])])]),t._v(" "),a("h2",{attrs:{id:"backtracking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backtracking"}},[t._v("#")]),t._v(" Backtracking")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Meaning")]),t._v(" "),a("ul",[a("li",[t._v("When you cannot find the answer in a certain branch, you 'backtrack' to a different branch to find the right answer.")]),t._v(" "),a("li",[t._v("Optimization problems")]),t._v(" "),a("li",[t._v("Decision problems : Is there an answer? ex:Maze, n-Queen, map coloring, subset sum")])])]),t._v(" "),a("li",[a("p",[t._v("How it works - Maze")]),t._v(" "),a("ul",[a("li",[t._v("Two stacks needed : visited true false stack and last visited push/pop stack")]),t._v(" "),a("li",[t._v("Push every coordinates you visited to push/pop stack as well as marking True on true false stack.")]),t._v(" "),a("li",[t._v("When you hit a dead end, pop from push/pop stack one by one. You will backtrack one coordinate at a time.")]),t._v(" "),a("li",[t._v("This is basically DFS, but at every node you check whether it is 'promising'")]),t._v(" "),a("li",[t._v("If it is not 'promising', you backtrack to its' parent node and DFS again.")])])]),t._v(" "),a("li",[a("p",[t._v("How it works - N Queen")]),t._v(" "),a("ul",[a("li",[t._v("You want to place N number of queens on a chess board.")]),t._v(" "),a("li",[t._v("Place the first queen on the first row, first column")]),t._v(" "),a("li",[t._v("Second queen must be placed on a second row, but some cells are already pruned. By default place the second queen on the available first left column. (Note that in a DFS case, we would place queens on all possible scenarios AND THEN confirm whether it is viable or not)")]),t._v(" "),a("li",[t._v("Carry on until you cannot place queen on the next row OR you placed N number of queens and reached solution")]),t._v(" "),a("li",[t._v("If you reached a dead end, you backtrack to prior rows and place queens on the next option.")]),t._v(" "),a("li",[t._v("Continue until you placed N number of queens")])])]),t._v(" "),a("li",[a("p",[t._v("How it works - Power Set")]),t._v(" "),a("ul",[a("li",[t._v("Powerset meaning : All subsets including itself and empty set")]),t._v(" "),a("li",[t._v("Number of powerset is always $2^n$")]),t._v(" "),a("li",[t._v("Method : Use list with N number of True/False items.")]),t._v(" "),a("li",[t._v("Powerset is the set of all subsets of different sizes!")]),t._v(" "),a("li",[t._v("Any subset can be represented as a bit string of length N.")]),t._v(" "),a("li",[t._v("First build a list of. "),a("code",[t._v("B=[0]*len(set)")]),t._v(". This will be used to generate bitstrings.")]),t._v(" "),a("li",[t._v("Second make list of bitstrings. This will save all possible bitstrings. "),a("code",[t._v("bitstrings=[]")])]),t._v(" "),a("li",[t._v("Generate Bitstrings. "),a("code",[t._v("generateBitstrings(0, B, bitstrings)")])])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateBitstrings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bitstrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\tbitstrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deepcopy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Divided to two cases each time. The B list which is [0, 0, 0, ... 0]")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ith item is changed to either 1 or 0 everytime. When recursion reaches i==N,")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Every item has been modified and then added to list bitstrings.")]),t._v("\n\t\tB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\t\tgenerateBitstrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bitstrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\t\tgenerateBitstrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bitstrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("ul",[a("li",[t._v("Use bitstrings to select items.")])]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("subsets "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" bitstring "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" bitstrings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\tsubset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\tbit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bitstring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" bit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\tsubset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tsubsets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" subsets\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("Backtracking vs DFS")]),t._v(" "),a("ul",[a("li",[t._v("Backtracking involves a method called 'Pruning'")]),t._v(" "),a("li",[t._v("By 'pruning' not 'promising' 'nodes' early on, you don't have to search every possible case.")]),t._v(" "),a("li",[t._v("Generally backtracking is faster than DFS")])])])]),t._v(" "),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);e.default=n.exports}}]);