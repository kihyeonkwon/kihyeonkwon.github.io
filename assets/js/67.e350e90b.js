(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{1017:function(t,e,n){"use strict";n.r(e);var a=n(45),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"factory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#factory"}},[t._v("#")]),t._v(" Factory")]),t._v(" "),n("blockquote",[n("p",[t._v("Use the factory keyword when implementing a constructor that doesn’t always create a new instance of its class")])]),t._v(" "),n("ul",[n("li",[t._v("새로운 인스터스를 생성하고 싶지 않을 때 쓰는 생성자로 Singleton Pattern을 따른 것.")])]),t._v(" "),n("p",[t._v("Singleton Pattern")]),t._v(" "),n("p",[t._v("소프트웨어 디자인 패턴에서 싱글톤 패턴을 따르는 클래스는, 생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나이고 최초 생성 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 리턴한다. 이와 같은 디자인 유형을 싱글톤 패턴이라고 한다.")])])}),[],!1,null,null,null);e.default=r.exports}}]);